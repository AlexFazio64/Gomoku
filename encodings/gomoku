% board definition
lines(X) :- size(Y), X=Y-2.
lines(X) :- lines(Y), X>=0, X=Y-1.

% additional predicates are added via embasp
%size(S).
%player(ID).
%enemy(ID).

% divide pawns by player
mine(X,Y) :- pawn(X,Y,P), player(P).
other(X,Y) :- pawn(X,Y,P), enemy(P).

% occupied positions
any(X,Y) :- other(X,Y).
any(X,Y) :- mine(X,Y).

% a line is a group of contiguous pawns that follow a direction
% V: 	N -> S
% H: 	W -> E
% D1: 	NW -> SE
% D2: 	NE -> SW
line4(SX,SY,EX,SY,"V") 	:- mine(SX,SY), mine(SX+1,SY), mine(SX+2,SY), mine(EX,SY), EX=SX+3.
line4(SX,SY,SX,EY,"H") 	:- mine(SX,SY), mine(SX,SY+1), mine(SX,SY+2), mine(SX,EY), EY=SY+3.
line4(SX,SY,EX,EY,"D1") :- mine(SX,SY), mine(SX+1,SY+1), mine(SX+2,SY+2), mine(EX,EY), EX=SX+3, EY=SY+3.
line4(SX,SY,EX,EY,"D2") :- mine(SX,SY), mine(SX+1,SY-1), mine(SX+2,SY-2), mine(EX,EY), EX=SX+3, EY=SY-3.

line3(SX,SY,EX,SY,"V")	:- mine(SX,SY), mine(SX+1,SY), mine(EX,SY), EX=SX+2, not mine(SX-1,SY), not mine(EX+1,SY).
line3(SX,SY,SX,EY,"H")	:- mine(SX,SY), mine(SX,SY+1), mine(SX,EY), EY=SY+2, not mine(SX,SY-1), not mine(SX,EY+1).
line3(SX,SY,EX,EY,"D1") :- mine(SX,SY), mine(SX+1,SY+1), mine(EX,EY), EX=SX+2, EY=SY+2, not mine(SX-1,SY-1), not mine(EX+1,EY+1).
line3(SX,SY,EX,EY,"D2") :- mine(SX,SY), mine(SX+1,SY-1), mine(EX,EY), EX=SX+2, EY=SY-2, not mine(SX-1,SY+1), not mine(EX+1,EY-1).

line2(SX,SY,EX,SY,"V") 	:- mine(SX,SY), mine(EX,SY), EX=SX+1, not mine(SX-1,SY), not mine(EX+1,SY).
line2(SX,SY,SX,EY,"H") 	:- mine(SX,SY), mine(SX,EY), EY=SY+1, not mine(SX,SY-1), not mine(SX,EY+1).
line2(SX,SY,EX,EY,"D1") :- mine(SX,SY), mine(EX,EY), EX=SX+1, EY=SY+1, not mine(SX-1,SY-1), not mine(EX+1,EY+1).
line2(SX,SY,EX,EY,"D2") :- mine(SX,SY), mine(EX,EY), EX=SX+1, EY=SY-1, not mine(SX-1,SY+1), not mine(EX+1,EY-1).

% for each line there can be two good positions...
% before the line, or after the line, so that the line becomes longer

candidate(7..11, 7..11, 1) :- #count{X,Y : any(X,Y)}<2. 	% internal ring as a fallback

candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X-1, CY=Y+0.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X+1, CY=Y+0.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X+0, CY=Y-1.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X+0, CY=Y+1.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X-1, CY=Y-1.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X+1, CY=Y+1.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X-1, CY=Y+1.
candidate(CX,CY,2) :- mine(X,Y), not any(CX,CY), lines(CX), lines(CY), CX=X+1, CY=Y-1.

candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
candidate(CX,CY,3) :- line2(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
candidate(CX,CY,4) :- line3(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
candidate(CX,CY,5) :- line4(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

% same thing for enemy lines
e_line4(SX,SY,EX,SY,"V") 	:- other(SX,SY), other(SX+1,SY), other(SX+2,SY), other(EX,SY), EX=SX+3.
e_line4(SX,SY,SX,EY,"H") 	:- other(SX,SY), other(SX,SY+1), other(SX,SY+2), other(SX,EY), EY=SY+3.
e_line4(SX,SY,EX,EY,"D1") 	:- other(SX,SY), other(SX+1,SY+1), other(SX+2,SY+2), other(EX,EY), EX=SX+3, EY=SY+3.
e_line4(SX,SY,EX,EY,"D2") 	:- other(SX,SY), other(SX+1,SY-1), other(SX+2,SY-2), other(EX,EY), EX=SX+3, EY=SY-3.

e_line3(SX,SY,EX,SY,"V")	:- other(SX,SY), other(SX+1,SY), other(EX,SY), EX=SX+2, not other(SX-1,SY), not other(EX+1,SY).
e_line3(SX,SY,SX,EY,"H")	:- other(SX,SY), other(SX,SY+1), other(SX,EY), EY=SY+2, not other(SX,SY-1), not other(SX,EY+1).
e_line3(SX,SY,EX,EY,"D1") 	:- other(SX,SY), other(SX+1,SY+1), other(EX,EY), EX=SX+2, EY=SY+2, not other(SX-1,SY-1), not other(EX+1,EY+1).
e_line3(SX,SY,EX,EY,"D2") 	:- other(SX,SY), other(SX+1,SY-1), other(EX,EY), EX=SX+2, EY=SY-2, not other(SX-1,SY+1), not other(EX+1,EY-1).

e_line2(SX,SY,EX,SY,"V") 	:- other(SX,SY), other(EX,SY), EX=SX+1, not other(SX-1,SY), not other(EX+1,SY).
e_line2(SX,SY,SX,EY,"H") 	:- other(SX,SY), other(SX,EY), EY=SY+1, not other(SX,SY-1), not other(SX,EY+1).
e_line2(SX,SY,EX,EY,"D1")	:- other(SX,SY), other(EX,EY), EX=SX+1, EY=SY+1, not other(SX-1,SY-1), not other(EX+1,EY+1).
e_line2(SX,SY,EX,EY,"D2")	:- other(SX,SY), other(EX,EY), EX=SX+1, EY=SY-1, not other(SX-1,SY+1), not other(EX+1,EY-1).

% those are positions designed to block enemy lines...
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
obstacole(CX,CY,3) :- e_line2(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
obstacole(CX,CY,4) :- e_line3(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+0.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2, "V"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y1+0.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y1-1.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2, "H"), not any(CX,CY), lines(CX), lines(CY), CX=X1+0, CY=Y2+1.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1-1.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2,"D1"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2+1.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X1-1, CY=Y1+1.
obstacole(CX,CY,5) :- e_line4(X1,Y1,X2,Y2,"D2"), not any(CX,CY), lines(CX), lines(CY), CX=X2+1, CY=Y2-1.

% possible positions
pos(A,B,C) :- candidate(A,B,C).
pos(A,B,C) :- obstacole(A,B,C).

% guess a position
notMax(X,Y,L) :- pos(X,Y,L), pos(X1,Y1,L1), L<L1.
placed(X,Y,P) | notPlaced(X,Y,P) :- pos(X,Y,L), not notMax(X,Y,L), player(P).

% choose only one position
:- #count{X,Y: placed(X,Y,_)}!=1.

% it must be free and legal
:- placed(X,Y,_), pawn(X,Y,_).

:~ placed(X,Y,_), pos(X1,Y1,L), X!=X1, Y!=Y1. [1@L]

% count the candidates and the obstacoles and evaluate
% penalty(D,2):- #count{XC,YC : candidate(XC,YC,2)}=D.
% penalty(D,3):- #count{XC,YC,EX,EY : e_line2(XC,YC,EX,EY,_)}=C, #count{XO,YO,EX,EY : line2(XO,YO,EX,EY,_)}=O, D=O-C.
% penalty(D,4):- #count{XC,YC,EX,EY : e_line3(XC,YC,EX,EY,_)}=C, #count{XO,YO,EX,EY : line3(XO,YO,EX,EY,_)}=O, D=O-C.
% penalty(D,5):- #count{XC,YC,EX,EY : e_line4(XC,YC,EX,EY,_)}=C, #count{XO,YO,EX,EY : line4(XO,YO,EX,EY,_)}=O, D=O-C.

%:~ penalty(D,L), D>0. [D@L]

%%%%%%% give priority to longest possible position